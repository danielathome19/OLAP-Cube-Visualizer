#pragma checksum "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3d056bd695d6635021e3083f071d6ba127cdad44"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace csharpviewer.Pages
{
    #line hidden
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\_Imports.razor"
using csharpviewer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\_Imports.razor"
using csharpviewer.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\_Imports.razor"
using BlazorInputFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\_Imports.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\_Imports.razor"
using static System.Console;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\Pages\Index.razor"
using System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\Pages\Index.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\Pages\Index.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\Pages\Index.razor"
using System.Collections.Generic;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\Pages\Index.razor"
using LumenWorks.Framework.IO.Csv;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\Pages\Index.razor"
using OxyPlot;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\Pages\Index.razor"
using OxyPlot.Axes;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\Pages\Index.razor"
using OxyPlot.Series;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\Pages\Index.razor"
using OxyPlot.Blazor;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 77 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\Pages\Index.razor"
       
    bool factBtnDisabled = true;

    string errmsg = "";
    bool displayFactTable = false;
    bool displayAggregateTable = false;

    DataTable data = new DataTable();  
    object[] headers;

    bool runprog = true;

    List<int> drillaggregates = new List<int>();
    //headermenu(headers);
    //Console.Write("Enter initial aggregate column # (must be numeric values only): ");
    int initagg;// = Convert.ToInt32(Console.ReadLine());
    //drillaggregates.Add(initagg);
    List<int> filters = new List<int>();
    List<object> filterdata = new List<object>();

    IFileListEntry[] selectedFiles;
    const int MAX_FILE_SIZE = 1 * 1024 * 1024 * 1024;

    void HandleSelection(IFileListEntry[] files) {
        selectedFiles = files;
        for (int i = 0; i < selectedFiles.Length; i++) {
            if (selectedFiles[i].Size > MAX_FILE_SIZE) {
                selectedFiles[i] = null;
            }
        }
    }

    async Task LoadFile(IFileListEntry file) {
        try {
            if (file != null) {// && file.Type == "text/csv") {
                // So the UI updates to show progress
                file.OnDataRead += (sender, eventArgs) => InvokeAsync(StateHasChanged);

                // Just load into .NET memory to show it can be done
                // Alternatively it could be saved to disk, or parsed in memory, or similar
                //Console.WriteLine(file.Name);
                var ms = new MemoryStream();
                await file.Data.CopyToAsync(ms);

                

#line default
#line hidden
#nullable disable
#nullable restore
#line 121 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\Pages\Index.razor"
                 using (var csvReader = new CsvReader(ms, false)) {  
                    data.Load(csvReader);  
                }

#line default
#line hidden
#nullable disable
#nullable restore
#line 123 "D:\Google Drive\Resources\School\College\UW - Whitewater\2020 - 2021\0 Fall\Advanced Databases\Final Research Project\Final Paper\Final Project\csharpviewer\Pages\Index.razor"
                 
                
                headers = (object[])data.Rows[0].ItemArray.Clone();

                data.Rows[0].Delete();
                data.AcceptChanges();

                factBtnDisabled = false;
            } else {
                Console.WriteLine("Incompatible file detected"); 
            }
        } catch { Console.WriteLine("Could not upload file"); }
    }

    void menuZero() {
        displayAggregateTable = false;
        displayFactTable = true;
    }

    void menuOne() {
        displayAggregateTable = true;
        displayFactTable = false;
    }

    void menuTwo() {
        
    }

    void menuThree() {
        displayAggregateTable = true;
        displayFactTable = false;
    }

    void menuFour() {
        displayAggregateTable = true;
        displayFactTable = false;
    }

    void menuFive() {
        
    }

    void menuSeven() {
        drillaggregates.Clear();
        displayAggregateTable = true;
        displayFactTable = false;
    }

    void menuEight() {
        filters.Clear();
        filterdata.Clear();
        displayAggregateTable = true;
        displayFactTable = false;
    }

    void menuNine() {
        displayAggregateTable = true;
        displayFactTable = false;
    }

    void menuTen() {
        displayAggregateTable = true;
        displayFactTable = false;
    }

    static DataTable getaggregatetable(DataTable data, 
    int[] drillaggregates = null, int[] filters = null, object[] filterdata = null) {
        var filtertable = data.Copy();
        
        for (int i = 0; i < filters.Length; i++) {
            for (int j = 0; j < filtertable.Rows.Count; j++) {
                if (!filtertable.Rows[j][filters[i]].Equals(filterdata[i])) 
                    filtertable.Rows[j].Delete();
            }
        }
        filtertable.AcceptChanges();

        var aggdata = filtertable.Copy();
        for (int i = aggdata.Columns.Count; i --> 0;)
            if (!drillaggregates.Contains(i)) aggdata.Columns.RemoveAt(i); 
        return aggdata;
    } 

    static object[] getaggregateheaders(object[] headers, int[] drillaggregates = null) {
        var aggheaders = new List<object>();
        for (int i = 1; i < drillaggregates.Length; i++) {
            aggheaders.Add(headers[drillaggregates[i]]);
        }

        aggheaders.Add(headers[drillaggregates[0]]);
        return aggheaders.ToArray();
    }

    static void displayaggregatetable(DataTable data, object[] headers,
    int[] drillaggregates = null, int[] filters = null, object[] filterdata = null) {
        if (drillaggregates.Length == 1 && filters.Length == 0) {
            double colsum = 0;
            foreach (DataRow dr in data.Rows) colsum += Convert.ToDouble(dr.ItemArray[drillaggregates[0]]);
            string[] curheaders = {"Summary", $"Sum of all {headers[drillaggregates[0]]}", "Record Count"};
            string[] curtable = {"Summary", colsum.ToString(), data.Rows.Count.ToString()};
            Console.WriteLine(string.Join(", ", curheaders));
            Console.WriteLine(string.Join(", ", curtable));
        } else {
            var aggheaders = getaggregateheaders(headers, drillaggregates);
            var aggdata = getaggregatetable(data, drillaggregates, filters, filterdata);

            Console.WriteLine(string.Join(", ", aggheaders));
            for (int i = 0; i < aggdata.Rows.Count; i++) Console.WriteLine(string.Join(", ", aggdata.Rows[i].ItemArray));
        }
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
